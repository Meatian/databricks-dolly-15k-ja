{"index":"13465","instruction":"に記載されているソートアルゴリズムを抽出する。","input":"ソートアルゴリズムは数多く存在するが、実際の実装ではいくつかのアルゴリズムが優勢である。小さなデータセットでは挿入ソートが広く使われ、大きなデータセットでは漸近的に効率の良いソート、主にヒープソート、マージソート、クイックソートが使われる。効率的な実装では、一般にハイブリッドアルゴリズムが用いられ、全体的なソートには漸近的に効率的なアルゴリズムが、再帰の底にある小さなリストには挿入ソートが組み合わされます。高度に調整された実装では、Android、Java、Pythonで使用されているTimsort（マージソート、挿入ソート、追加ロジック）や、一部のC++ソート実装や.NETで（変形形式で）使用されているintrosort（quicksortとheapsort）など、より高度な亜種を使用しています。\n\n一定の区間内の数値など、より限定されたデータに対しては、カウントソートや基数ソートなどの分布ソートが広く使われている。バブルソートやその亜種は、実際にはほとんど使われないが、教育や理論的な議論ではよく見かける。\n\n物理的に物体を分類する場合（例えば、書類、テスト、書籍のアルファベット順など）、直感的に、小さな集合には挿入ソートを使うのが一般的である。より大きな集合では、頭文字などのバケツに入れることが多く、複数のバケツに入れることで非常に大きな集合でも実用的な仕分けができる。多くの場合、物体を床や広い場所に広げるなど、スペースは比較的安価であるが、操作にはコストがかかり、特に物体を大きく移動させる場合には、参照の局所性が重要となる。マージソートは物理的な物体に対して実用的であり、特にマージするリストごとに1つずつ、2つの手を使うことができる。また、スペースを残す挿入ソートの変形であるライブラリソートのようなアルゴリズムも、物理的な使用には実用的である。","output":"挿入ソート、ヒープソート、マージソート、クイックソート、ティムソート、ラディックスソート、バブルソート、バケットソート、ライブラリソート、複数のソートアルゴリズムを組み合わせたハイブリッドアルゴリズム。","category":"information_extraction"}
