{"index":"275","instruction":"なぜマルチスレッドでPythonのコードが速くならないのでしょうか？どうすれば直るのか。","input":"","output":"Pythonはスレッドセーフのために、GILと呼ばれるGlobal Interpreter Lockでインタプリタへのアクセスを制限しています。残念ながら、この設計上の決定により、複数のスレッドを同時に実行できるマシンであっても、一度に1つのスレッドしかPythonコードを解釈できないように制限されています。\n\nPythonのコードをデータセットで実行したい場合、データを独立したセグメントに分割できる（データ分割と呼ばれる処理）場合、Pythonのマルチプロセシングライブラリを検討するのがよいでしょう。\n\n例として、arg1という1つの引数を取る関数fooを考え、val1、val2、val3という複数の値に対してfoo関数を実行したいとします。\n\ndef foo(arg1)：\n  # 何かをする\n\nif __name__ == '__main__'：\n  foo(val1)\n  foo(val2)\n  foo(val3)\n\nfooを複数のプロセスでまとめて実行させるには、マルチプロセシングプールを使って複数のワーカープロセスを一緒に走らせればよいでしょう：\n\nfrom multiprocessing import Pool\n\ndef foo(arg1)：\n  # 何かをする\n\nif __name__ == '__main__'：\n  p = Pool()\n  p.map(foo, [val1, val2, val3])\n\nマルチプロセッシングライブラリは、その他にも並列プログラミングのための様々なAPIを提供しています。もっと知りたいと思いませんか？","category":"general_qa"}
