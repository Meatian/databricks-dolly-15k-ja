{"index":"2657","instruction":"第n番目のフィボナッチ数を計算するための再帰的な関数を書いてください。","input":"","output":"以下は、n番目のフィボナッチ数を計算する再帰的なPython関数 fib(n) です。これは基本的なケースと再帰的なケースに分かれています。基本ケースは、フィボナッチ数列の最初の2項が0と1であることから、fib(0)=0、fib(1)=1である。再帰的な場合は、n番目のフィボナッチ数f_nは前の2つのフィボナッチ数の和として書けるので、f_n = f_{n-1} + f_{n-2}という事実によって与えられる。これをまとめると、次のようになります。\n\n```\ndef fib(n)：\n\t# 基本ケース\n\tif n == 0：\n\t\tリターン0\n\tif n == 1：\n\t\t1 を返す\n\n\t# 再帰の場合\n\treturn fib(n - 1) + fib(n - 2)\n```\n\nしかし、この方法でフィボナッチ数を再帰的に計算すると、nの値に対して指数関数的な時間がかかるので、このコードは大きな入力に対して非常に遅くなる可能性があります。以前の結果をメモしておくか、非再帰的なアプローチを使うことで改善できるだろう。また、n番目のフィボナッチ数の閉形式も存在し、さらに速く評価することができます。","category":"creative_writing"}
